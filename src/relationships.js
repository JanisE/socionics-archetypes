//import types from "./types";
const types = require('./types');

const diffToMyRelation = [
	'identity',
	'quasiidentity',
	'kindred',
	'benefactor',
	'business', // look-a-like
	'beneficiary',
	'superego',
	'activity',
	'contrary', // extinguishment
	'mirror',
	'illusionary', // mirage
	'supervisee',
	'semidual',
	'supervisor',
	'duality',
	'conflict'
];

const diffToYourRelation = diffToMyRelation.slice();
diffToYourRelation[3] = 'beneficiary';
diffToYourRelation[5] = 'benefactor';
diffToYourRelation[11] = 'supervisor';
diffToYourRelation[13] = 'supervisee';

function getRelationForMe (dichotomyAbbrMe, dichotomyAbbrYou) {
	const diff
		= (dichotomyAbbrMe[0] === dichotomyAbbrYou[0] ? 0 : 8)
		+ (dichotomyAbbrMe[1] === dichotomyAbbrYou[1] ? 0 : 4)
		+ (dichotomyAbbrMe[2] === dichotomyAbbrYou[2] ? 0 : 2)
		+ (dichotomyAbbrMe[3] === dichotomyAbbrYou[3] ? 0 : 1);

	return diffToMyRelation[diff];
}

function getRelationForYou (dichotomyAbbrMe, dichotomyAbbrYou) {
	const diff
		= (dichotomyAbbrMe[0] === dichotomyAbbrYou[0] ? 0 : 8)
		+ (dichotomyAbbrMe[1] === dichotomyAbbrYou[1] ? 0 : 4)
		+ (dichotomyAbbrMe[2] === dichotomyAbbrYou[2] ? 0 : 2)
		+ (dichotomyAbbrMe[3] === dichotomyAbbrYou[3] ? 0 : 1);

	return diffToYourRelation[diff];
}

function outputCssSelectors () {
	console.log('// Generated by relationships.js\n');

	diffToYourRelation.forEach(relationName => {
		const selectors = [];

		Object.keys(types).forEach((meAbbr) => {
			Object.keys(types).forEach((youAbbr) => {
				// For the view, we mark relationships for "me", but from "you" perspective.
				// That is, if we mark all relationships for type A,
				// 	and A is supervisee in A-B relationship, we mark B as supervisor (from their perspective).
				if (relationName === getRelationForYou(types[meAbbr].dichotomyAbbr, types[youAbbr].dichotomyAbbr)) {
					selectors.push(`.rel-for-${meAbbr} .type-${youAbbr}`);
				}
			});
		});

		console.log(selectors.join(',\n') + ' {\n\t.rel-' + relationName + ' {\n\t\tdisplay: block;\n\t}\n}\n');
	})
}

outputCssSelectors();
